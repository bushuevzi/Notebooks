Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-10-10T22:38:18+03:00

====== Generate views ======
Created Понедельник 10 Октябрь 2016

urls.py:
{{./pasted_image001.png}}

views.py:
{{./pasted_image.png}}

index.html:
{{./pasted_image004.png}}

results.html:
{{./pasted_image002.png}}

detail.html:
{{./pasted_image003.png}}

We’re using two generic views here: **ListView** and **DetailView**. Respectively, those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.”

* Each generic view needs to know what model it will be acting upon. This is provided using the **model** attribute.
* The **DetailView** generic view expects the primary key value captured from the URL to be called "pk", so we’ve changed **question_id** to **pk** for the generic views.

By default, the **DetailView** generic view uses a template called **<app name>/<model name>_detail.html.** In our case, it would use the template **"polls/question_detail.html"**. The **template_name** attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the **template_name** for the **results** list view – this ensures that the results view and the detail view have a different appearance when rendered, even though they’re both a **DetailView** behind the scenes.

Similarly, the **ListView** generic view uses a default template called **<app name>/<model name>_list.html**; we use **template_name** to tell **ListView** to use our existing **"polls/index.html"** template.

In previous parts of the tutorial, the templates have been provided with a context that contains the **question** and **latest_question_list** context variables. For **DetailView** the **question** variable is provided automatically – since we’re using a Django model (**Question**), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is **question_list**. To override this we provide the **context_object_name** attribute, specifying that we want to use **latest_question_list** instead. As an alternative approach, you could change your templates to match the new default context variables – but it’s a lot easier to just tell Django to use the variable you want.
