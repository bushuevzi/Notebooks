Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-12-26T23:57:49+03:00

====== crawler for external Links ======
Created Понедельник 26 Декабрь 2016

{{./pasted_image003.png}}
{{./pasted_image001.png}}
{{./pasted_image002.png}}
from urllib.request import urlopen
from bs4 import BeautifulSoup
import re
import datetime
import random
pages = set()
random.seed(datetime.datetime.now())
#Retrive a list of all Internal links foun on a page
def getInternalLinks(bsObj, includeUrl):
	internalLinks = []
	#Finds all links that begin with a "/"
	for link in bsObj.findAll('a', href=re.compile("^(/|.*)"+includeUrl+")")):
		if link.attrs['href'] is not None:
			if link.attrs['href'] not in internalLinks:
				internalLinks.append(link.attrs['href'])
	return internalLinks
#Retrive a list of all external links founk on a page
def getExternalLinks(bsObj,excludeUrl):
	externalLinks = []
	#Finds all links that start whith "http" or "www" that do
	#not contain the current URL
	for link in bsObj.findAll("a", href=re.compile("^(http|www)((?!"+excludeUrl+").)*$")):
		if link.attrs['href'] is not None:
			if link.attrs['href'] not in externalLinks:
				externalLinks.append(link.attrs['href'])
	return externalLinks
def splitAddress(address):
	addressParts=address.replace("http://", "").split("/")
	return addressParts
def getRandomExternalLink(startingPage):
	html = urlopen(startingPage)
	bsObj = BeautifulSoup(html, "lxml")
	externalLinks = getExternalLinks(bsObj, splitAddress(startingPage)[0])
	if len(externalLinks) == 0:
		internalLinks = getInternalLinks(startingPage)
		return getNextExternalLink(internalLinks[random.randint(len(internalLinks)-1)])
	else:
		return externalLinks[random.randint(0, len(externalLinks)-1)]
def followExternalOnly(startingSite):
	externalLink = getRandomExternalLink("http://oreilly.com")
	print("Random external link is: "+externalLink)
	followExternalOnly(externalLink)
followExternalOnly("http://oreilly.com")
